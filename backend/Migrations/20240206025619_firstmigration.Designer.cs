// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240206025619_firstmigration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DriverId"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("LogoTeam")
                        .HasColumnType("text");

                    b.Property<string>("NameDriver")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("RacingTeam")
                        .HasColumnType("text");

                    b.Property<int?>("Titles")
                        .HasColumnType("integer");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("backend.Models.DriverSeason", b =>
                {
                    b.Property<int>("DriverSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DriverSeasonId"));

                    b.Property<string>("LogoTeam")
                        .HasColumnType("text");

                    b.Property<string>("NameDriverseason")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("RacingTeam")
                        .HasColumnType("text");

                    b.Property<int?>("Seasonpoints")
                        .HasColumnType("integer");

                    b.Property<int?>("SeasonraceId")
                        .HasColumnType("integer");

                    b.Property<int?>("Seasonwins")
                        .HasColumnType("integer");

                    b.HasKey("DriverSeasonId");

                    b.HasIndex("SeasonraceId");

                    b.ToTable("DriverSeasons");
                });

            modelBuilder.Entity("backend.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<int?>("AustralianOpen")
                        .HasColumnType("integer");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Nameplayer")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<int?>("RolandGarros")
                        .HasColumnType("integer");

                    b.Property<int?>("UsOpen")
                        .HasColumnType("integer");

                    b.Property<int?>("Wimbledon")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("backend.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RaceId"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int?>("EighthDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("FifthDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("FourthDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<string>("Logorace")
                        .HasColumnType("text");

                    b.Property<string>("Namerace")
                        .HasColumnType("text");

                    b.Property<int?>("NinthDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeasonraceId")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("SeventhDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("SixthDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("TenthDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdDriverSeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("WinnerDriverSeasonId")
                        .HasColumnType("integer");

                    b.HasKey("RaceId");

                    b.HasIndex("EighthDriverSeasonId");

                    b.HasIndex("FifthDriverSeasonId");

                    b.HasIndex("FourthDriverSeasonId");

                    b.HasIndex("NinthDriverSeasonId");

                    b.HasIndex("SeasonraceId");

                    b.HasIndex("SecondDriverSeasonId");

                    b.HasIndex("SeventhDriverSeasonId");

                    b.HasIndex("SixthDriverSeasonId");

                    b.HasIndex("TenthDriverSeasonId");

                    b.HasIndex("ThirdDriverSeasonId");

                    b.HasIndex("WinnerDriverSeasonId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("backend.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeasonId"));

                    b.Property<int?>("ChampionTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Edition")
                        .HasColumnType("integer");

                    b.Property<int?>("SubChampionTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("SeasonId");

                    b.HasIndex("ChampionTeamId");

                    b.HasIndex("SubChampionTeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("backend.Models.SeasonTeam", b =>
                {
                    b.Property<int>("SeasonTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeasonTeamId"));

                    b.Property<int?>("Draw")
                        .HasColumnType("integer");

                    b.Property<int?>("Gd")
                        .HasColumnType("integer");

                    b.Property<string>("Logost")
                        .HasColumnType("text");

                    b.Property<int?>("Lose")
                        .HasColumnType("integer");

                    b.Property<string>("Nameseasonteam")
                        .HasColumnType("text");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int?>("Win")
                        .HasColumnType("integer");

                    b.HasKey("SeasonTeamId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonTeams");
                });

            modelBuilder.Entity("backend.Models.Seasonrace", b =>
                {
                    b.Property<int>("SeasonraceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeasonraceId"));

                    b.Property<int?>("Edition")
                        .HasColumnType("integer");

                    b.HasKey("SeasonraceId");

                    b.ToTable("Seasonraces");
                });

            modelBuilder.Entity("backend.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<string>("Flag")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("NameTeam")
                        .HasColumnType("text");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("TeamId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("backend.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentId"));

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("NameTournament")
                        .HasColumnType("text");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("backend.Models.Trophy", b =>
                {
                    b.Property<int>("TrophyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrophyId"));

                    b.Property<string>("NameTrophy")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("TrophyId");

                    b.HasIndex("TeamId");

                    b.ToTable("Trophies");
                });

            modelBuilder.Entity("backend.Models.Winrace", b =>
                {
                    b.Property<int>("WinraceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WinraceId"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<string>("Namerace")
                        .HasColumnType("text");

                    b.HasKey("WinraceId");

                    b.HasIndex("DriverId");

                    b.ToTable("Winraces");
                });

            modelBuilder.Entity("backend.Models.DriverSeason", b =>
                {
                    b.HasOne("backend.Models.Seasonrace", "Seasonrace")
                        .WithMany("DriverSeasons")
                        .HasForeignKey("SeasonraceId");

                    b.Navigation("Seasonrace");
                });

            modelBuilder.Entity("backend.Models.Race", b =>
                {
                    b.HasOne("backend.Models.DriverSeason", "Eighth")
                        .WithMany()
                        .HasForeignKey("EighthDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Fifth")
                        .WithMany()
                        .HasForeignKey("FifthDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Fourth")
                        .WithMany()
                        .HasForeignKey("FourthDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Ninth")
                        .WithMany()
                        .HasForeignKey("NinthDriverSeasonId");

                    b.HasOne("backend.Models.Seasonrace", "Seasonrace")
                        .WithMany("Races")
                        .HasForeignKey("SeasonraceId");

                    b.HasOne("backend.Models.DriverSeason", "Second")
                        .WithMany()
                        .HasForeignKey("SecondDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Seventh")
                        .WithMany()
                        .HasForeignKey("SeventhDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Sixth")
                        .WithMany()
                        .HasForeignKey("SixthDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Tenth")
                        .WithMany()
                        .HasForeignKey("TenthDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Third")
                        .WithMany()
                        .HasForeignKey("ThirdDriverSeasonId");

                    b.HasOne("backend.Models.DriverSeason", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerDriverSeasonId");

                    b.Navigation("Eighth");

                    b.Navigation("Fifth");

                    b.Navigation("Fourth");

                    b.Navigation("Ninth");

                    b.Navigation("Seasonrace");

                    b.Navigation("Second");

                    b.Navigation("Seventh");

                    b.Navigation("Sixth");

                    b.Navigation("Tenth");

                    b.Navigation("Third");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("backend.Models.Season", b =>
                {
                    b.HasOne("backend.Models.Team", "Champion")
                        .WithMany()
                        .HasForeignKey("ChampionTeamId");

                    b.HasOne("backend.Models.Team", "SubChampion")
                        .WithMany()
                        .HasForeignKey("SubChampionTeamId");

                    b.HasOne("backend.Models.Tournament", "Tournament")
                        .WithMany("Seasons")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Champion");

                    b.Navigation("SubChampion");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("backend.Models.SeasonTeam", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Models.Team", b =>
                {
                    b.HasOne("backend.Models.Season", null)
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("backend.Models.Trophy", b =>
                {
                    b.HasOne("backend.Models.Team", "Team")
                        .WithMany("Trophies")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("backend.Models.Winrace", b =>
                {
                    b.HasOne("backend.Models.Driver", "Driver")
                        .WithMany("Winraces")
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Navigation("Winraces");
                });

            modelBuilder.Entity("backend.Models.Season", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("backend.Models.Seasonrace", b =>
                {
                    b.Navigation("DriverSeasons");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("backend.Models.Team", b =>
                {
                    b.Navigation("Trophies");
                });

            modelBuilder.Entity("backend.Models.Tournament", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
